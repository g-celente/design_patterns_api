import { ProductRepository } from '../repositories/ProductRepository.js';
import { OrderRepository } from '../repositories/OrderRepository.js';

/**
 * PADR√ÉO FACTORY METHOD
 * 
 * RepositoryFactory - Cria inst√¢ncias de reposit√≥rios de forma centralizada
 * 
 * Benef√≠cios:
 * - Encapsula a l√≥gica de cria√ß√£o de objetos complexos
 * - Facilita manuten√ß√£o (mudan√ßas na cria√ß√£o ficam centralizadas)
 * - Permite extens√£o f√°cil para novos tipos de reposit√≥rios
 * - Reduz acoplamento entre c√≥digo cliente e classes concretas
 * - Possibilita cache de inst√¢ncias e controle de ciclo de vida
 */
export class RepositoryFactory {
  // Cache de inst√¢ncias de reposit√≥rios (padr√£o Singleton por tipo)
  static #instances = new Map();

  /**
   * Tipos de reposit√≥rios dispon√≠veis
   */
  static TYPES = {
    PRODUCT: 'product',
    ORDER: 'order'
  };

  /**
   * Cria ou retorna inst√¢ncia de reposit√≥rio baseado no tipo
   * @param {string} type - Tipo do reposit√≥rio (use RepositoryFactory.TYPES)
   * @param {boolean} forceNew - Se true, cria nova inst√¢ncia mesmo que exista cache
   * @returns {IRepository} Inst√¢ncia do reposit√≥rio solicitado
   */
  static createRepository(type, forceNew = false) {
    // Se n√£o for√ßar nova inst√¢ncia e j√° existir no cache, retorna a existente
    if (!forceNew && this.#instances.has(type)) {
      console.log(`‚ôªÔ∏è  Retornando inst√¢ncia em cache: ${type}Repository`);
      return this.#instances.get(type);
    }

    let repository;

    // Factory Method: decide qual classe concreta instanciar
    switch (type) {
      case this.TYPES.PRODUCT:
        repository = new ProductRepository();
        console.log(`üè≠ Factory criou: ProductRepository`);
        break;

      case this.TYPES.ORDER:
        repository = new OrderRepository();
        console.log(`üè≠ Factory criou: OrderRepository`);
        break;

      default:
        throw new Error(`Tipo de reposit√≥rio desconhecido: ${type}`);
    }

    // Armazena no cache
    this.#instances.set(type, repository);
    return repository;
  }

  /**
   * Cria um ProductRepository
   */
  static createProductRepository(forceNew = false) {
    return this.createRepository(this.TYPES.PRODUCT, forceNew);
  }

  /**
   * Cria um OrderRepository
   */
  static createOrderRepository(forceNew = false) {
    return this.createRepository(this.TYPES.ORDER, forceNew);
  }

  /**
   * Limpa o cache de inst√¢ncias
   * √ötil para testes ou quando precisa for√ßar recria√ß√£o
   */
  static clearCache() {
    this.#instances.clear();
    console.log('üóëÔ∏è  Cache de reposit√≥rios limpo');
  }

  /**
   * Retorna todos os reposit√≥rios em cache
   */
  static getCachedRepositories() {
    return Array.from(this.#instances.keys());
  }

  /**
   * Verifica se um tipo de reposit√≥rio est√° em cache
   */
  static isCached(type) {
    return this.#instances.has(type);
  }

  /**
   * Remove um reposit√≥rio espec√≠fico do cache
   */
  static removeCached(type) {
    const removed = this.#instances.delete(type);
    if (removed) {
      console.log(`üóëÔ∏è  Reposit√≥rio removido do cache: ${type}`);
    }
    return removed;
  }
}

// Congela a classe para prevenir modifica√ß√µes
Object.freeze(RepositoryFactory);
